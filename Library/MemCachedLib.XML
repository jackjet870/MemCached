<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MemCachedLib</name>
    </assembly>
    <members>
        <member name="T:MemCachedLib.ByteBuilder">
            <summary>
            可变长byte集合
            读取数据后剩余数据非自动前移
            非线程安全类型
            GetInt等操作为高位在前
            </summary>
        </member>
        <member name="F:MemCachedLib.ByteBuilder.binary">
            <summary>
            原始数据
            </summary>
        </member>
        <member name="F:MemCachedLib.ByteBuilder.capacity">
            <summary>
            首次设置的默认容量
            </summary>
        </member>
        <member name="F:MemCachedLib.ByteBuilder.Capacity">
            <summary>
            当前容量
            </summary>
        </member>
        <member name="M:MemCachedLib.ByteBuilder.#ctor(System.Int32)">
            <summary>
            可变长byte集合
            </summary>
            <param name="capacity">容量[乘2倍数增长]</param>
        </member>
        <member name="M:MemCachedLib.ByteBuilder.#ctor(System.Byte[])">
            <summary>
            可变长byte集合
            </summary>
            <param name="binary">初始数据</param>
        </member>
        <member name="M:MemCachedLib.ByteBuilder.Add(System.Byte[])">
            <summary>
            将指定数据源的数据添加到集合
            </summary>
            <param name="srcArray">数据源</param>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.ByteBuilder.Add(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将指定数据源的数据添加到集合
            </summary>
            <param name="srcArray">数据源</param>
            <param name="index">数据源的起始位置</param>
            <param name="length">复制的长度</param>
        </member>
        <member name="M:MemCachedLib.ByteBuilder.RemoveRange(System.Int32)">
            <summary>
            从指针位置清除指定长度的字节
            </summary>
            <param name="length">长度，要小于Length</param>       
        </member>
        <member name="M:MemCachedLib.ByteBuilder.RemoveRange(System.Int32,System.Int32)">
            <summary>
            从相对指针偏移地址清除指定长度的字节
            </summary>        
            <param name="length">长度，要小于Length</param>
            <param name="offset">偏移量</param>
        </member>
        <member name="M:MemCachedLib.ByteBuilder.CopyTo(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从指针位置将数据复制到指定数组
            </summary>
            <param name="destArray">目标数组</param>
            <param name="index">目标数据索引</param>
            <param name="length">复制长度,要小于Length</param>       
        </member>
        <member name="M:MemCachedLib.ByteBuilder.CopyTo(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            将数据复制到指定数组
            </summary>
            <param name="destArray">目标数组</param>
            <param name="index">目标数据索引</param>
            <param name="length">复制长度</param>
            <param name="offset">相对指针的偏移量</param>
        </member>
        <member name="M:MemCachedLib.ByteBuilder.CutTo(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从指针位置将数据剪切到指定数组
            </summary>
            <param name="destArray">目标数组</param>
            <param name="index">目标数据索引</param>
            <param name="length">剪切长度,要小于Length</param>      
        </member>
        <member name="M:MemCachedLib.ByteBuilder.CutTo(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            将数据剪切到指定数组
            </summary>
            <param name="destArray">目标数组</param>
            <param name="index">目标数据索引</param>
            <param name="length">剪切长度</param>
            <param name="offset">相对指针的偏移量</param>
        </member>
        <member name="M:MemCachedLib.ByteBuilder.ToByte(System.Int32)">
            <summary>
            读取指定位置一个字节
            </summary>
            <param name="offset">相对指针的偏移索引</param>
            <returns></returns>       
        </member>
        <member name="M:MemCachedLib.ByteBuilder.ToInt16(System.Int32)">
            <summary>
            读取指定位置4个字节，返回其Int16表示类型
            </summary>
            <param name="offset">相对指针的偏移索引</param>
            <returns></returns>      
        </member>
        <member name="M:MemCachedLib.ByteBuilder.ToInt32(System.Int32)">
            <summary>
            读取指定位置4个字节，返回其Int32表示类型
            </summary>
            <param name="offset">相对指针的偏移索引</param>
            <returns></returns>       
        </member>
        <member name="M:MemCachedLib.ByteBuilder.ToInt64(System.Int32)">
            <summary>
            读取指定位置8个字节，返回其Int64表示类型
            </summary>
            <param name="offset">相对指针的偏移索引</param>
            <returns></returns>      
        </member>
        <member name="M:MemCachedLib.ByteBuilder.ToArray">
            <summary>
            返回有效数据的数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.ByteBuilder.ToArray(System.Int32)">
            <summary>
            返回有效数据的数组
            </summary>
            <param name="offset">相对指针的偏移索引</param>
            <returns></returns>        
        </member>
        <member name="M:MemCachedLib.ByteBuilder.ToArray(System.Int32,System.Int32)">
            <summary>
            返回有效数据的数组
            </summary>
            <param name="offset">相对指针的偏移索引</param>
            <param name="length">获取长度,要小于Length</param>
            <returns></returns>      
        </member>
        <member name="M:MemCachedLib.ByteBuilder.ReadRange(System.Int32)">
            <summary>
            从指针位置读取并清除指定长度的字节
            </summary>
            <param name="length">长度,要小于Length</param>
            <returns></returns>       
        </member>
        <member name="M:MemCachedLib.ByteBuilder.ReadRange(System.Int32,System.Int32)">
            <summary>
            从相对指针位置读取并清除指定长度的字节
            </summary>
            <param name="length">长度</param>
            <param name="offset">指针偏移量</param>
            <returns></returns>       
        </member>
        <member name="M:MemCachedLib.ByteBuilder.Clear">
            <summary>
            重置集合指针和有效数据长度为0 
            容量不受到影响
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.ByteBuilder.ReSet">
            <summary>
            重置集合为初始状态
            </summary>
        </member>
        <member name="M:MemCachedLib.ByteBuilder.ToString">
            <summary>
            字节数
            </summary>
            <returns></returns>
        </member>
        <member name="P:MemCachedLib.ByteBuilder.Length">
            <summary>
            获取当前的有效数量长度
            随着Read操作而减少
            </summary>
        </member>
        <member name="P:MemCachedLib.ByteBuilder.Position">
            <summary>
            当前数据的指针位置
            初始为0
            随着Read操作而增加
            </summary>
        </member>
        <member name="T:MemCachedLib.Cached.ConsistentHash`1">
            <summary>
            一致性哈希
            </summary>
            <typeparam name="T">节点类型</typeparam>
        </member>
        <member name="F:MemCachedLib.Cached.ConsistentHash`1.hashKeys">
            <summary>
            缓存所有哈希键
            </summary>        
        </member>
        <member name="F:MemCachedLib.Cached.ConsistentHash`1.defaultReplicate">
            <summary>
            初始环大小
            </summary>
        </member>
        <member name="F:MemCachedLib.Cached.ConsistentHash`1.keyHashNodeDic">
            <summary>
            哈希键与节点字典
            </summary>
        </member>
        <member name="M:MemCachedLib.Cached.ConsistentHash`1.#ctor">
            <summary>
            一致性哈希
            </summary>
        </member>
        <member name="M:MemCachedLib.Cached.ConsistentHash`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            一致性哈希
            </summary>
            <param name="nodes">节点</param>
        </member>
        <member name="M:MemCachedLib.Cached.ConsistentHash`1.Add(`0)">
            <summary>
            添加一个节点
            </summary>
            <param name="node">节点</param>
        </member>
        <member name="M:MemCachedLib.Cached.ConsistentHash`1.Add(`0,System.Boolean)">
            <summary>
            添加一个节点
            </summary>
            <param name="node">节点</param>
            <param name="updateKeyArray">是否把键更新到局部变量进行缓存</param>
        </member>
        <member name="M:MemCachedLib.Cached.ConsistentHash`1.Remove(`0)">
            <summary>
            删除一个节点
            </summary>
            <param name="node">节点</param>
        </member>
        <member name="M:MemCachedLib.Cached.ConsistentHash`1.GetNode(System.String)">
            <summary>
            获取键对应的节点
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.ConsistentHash`1.GetHaskKeyIndex(System.String)">
            <summary>
            获取键所对应的键哈希表的索引
            </summary>
            <param name="key">键值</param>
            <returns></returns>
        </member>
        <member name="T:MemCachedLib.Cached.HashAlgorithm">
            <summary>
            哈希值算法
            </summary>
        </member>
        <member name="M:MemCachedLib.Cached.HashAlgorithm.GetHashCode(System.String)">
            <summary>
            获取哈希值
            </summary>
            <param name="key">文本</param>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.HashAlgorithm.GetHashCode(System.Byte[])">
            <summary>
            获取哈希值
            </summary>
            <param name="bytes">二进制数据</param>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.HashAlgorithm.GetHashCode(System.Byte[],System.UInt32)">
            <summary>
            获取哈希值
            </summary>
            <param name="bytes">二进制数据</param>
            <param name="seed">种子</param>
            <returns></returns>
        </member>
        <member name="T:MemCachedLib.Cached.HashAlgorithm.Byte2Uint">
            <summary>
            byte转换为uint
            </summary>
        </member>
        <member name="T:MemCachedLib.Cached.MemCached">
            <summary>
            MemCached缓存操作对象
            线程安全类型
            </summary>
        </member>
        <member name="M:MemCachedLib.Cached.MemCached.Create(System.Net.IPEndPoint)">
            <summary>
            生成对应服务器实例的缓存操作对象        
            </summary>
            <param name="ip">服务器ip和端口</param>
            <returns></returns>
        </member>
        <member name="F:MemCachedLib.Cached.MemCached.hashCode">
            <summary>
            确保哈希是与IP变动而变动
            </summary>
        </member>
        <member name="F:MemCachedLib.Cached.MemCached.clientPool">
            <summary>
            客户端池
            </summary>
        </member>
        <member name="M:MemCachedLib.Cached.MemCached.#ctor(System.Net.IPEndPoint)">
            <summary>
            构造器
            </summary>
            <param name="ip">服务器ip</param>      
        </member>
        <member name="M:MemCachedLib.Cached.MemCached.Request``1(System.Func{MemCachedLib.CachedClient,``0})">
            <summary>
            表示公共的请求方法
            避免CachedClient漏收
            </summary>
            <typeparam name="T">返回的数据类型</typeparam>
            <param name="func">委托</param>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCached.Request(System.Action{MemCachedLib.CachedClient})">
            <summary>
            表示公共的请求方法
            避免CachedClient漏收
            </summary>
            <param name="action">回调</param>
        </member>
        <member name="M:MemCachedLib.Cached.MemCached.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>        
            <typeparam name="T">值类型</typeparam>        
            <param name="key">键值</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCached.Get(System.String)">
            <summary>
            获取缓存
            </summary>         
            <param name="key">键值</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCached.Store(MemCachedLib.OpCodes,System.String,System.Object,System.TimeSpan,System.Int64)">
            <summary>
            存储缓存
            </summary>         
            <param name="code">存储方式</param>
            <param name="key">键值</param>       
            <param name="value">缓存对象(需要可序列化)</param>
            <param name="expiry">缓存时长，0秒表示永久</param>
            <param name="cas">版本号(0表示忽略)</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCached.Set(System.String,System.Object,System.TimeSpan,System.Int64)">
            <summary>
            设置缓存
            </summary>         
            <param name="key">键值</param>       
            <param name="value">缓存对象(需要可序列化)</param>
            <param name="expiry">缓存时长，0秒表示永久</param>
            <param name="cas">版本号验证值(0表示忽略验证)</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCached.Add(System.String,System.Object,System.TimeSpan,System.Int64)">
            <summary>
            添加缓存       
            </summary>
            <param name="key">键值</param>
            <param name="value">缓存对象(需要可序列化)</param>
            <param name="expiry">过期时间，0秒表示永久</param>
            <param name="cas">版本号验证值(0表示忽略验证)</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCached.Replace(System.String,System.Object,System.TimeSpan,System.Int64)">
            <summary>
            替换缓存    
            </summary>
            <param name="key">键值</param>
            <param name="value">缓存对象(需要可序列化)</param>
            <param name="expiry">过期时间，0秒表示永久</param>
            <param name="cas">版本号验证值(0表示忽略验证)</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCached.Delete(System.String)">
            <summary>
            删除缓存
            </summary>               
            <param name="key">键值</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCached.Flush(System.TimeSpan)">
            <summary>
            刷新所有记录的过期时间        
            </summary>
            <param name="expiry">经过一定时间后过期，0秒表示保持不过期</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
        </member>
        <member name="M:MemCachedLib.Cached.MemCached.Touch(System.String,System.TimeSpan)">
            <summary>
            重置记录的过期时间
            <remarks>此功能一些服务器实现有bug，部分服务器不支持</remarks>
            </summary>
            <param name="key">键</param>
            <param name="expiry">过期时间</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCached.GAT``1(System.String,System.TimeSpan)">
            <summary>
            GetAndTouch
            获取并重置过期时间
            <remarks>此功能一些服务器实现有bug，部分服务器不支持</remarks>
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="key">键</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCached.Version">
            <summary>
            获取服务器版本
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCached.Stat(MemCachedLib.StatItems)">
            <summary>
            获取服务器状态信息
            </summary>
            <param name="item">选项</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCached.GetHashCode">
            <summary>
            确保哈希是与IP变动而变动
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCached.Dispose">
            <summary>
            清理并释放资源
            </summary>
        </member>
        <member name="P:MemCachedLib.Cached.MemCached.IPEndPoint">
            <summary>
            获取服务器ip和端口
            </summary>
        </member>
        <member name="T:MemCachedLib.Cached.MemCachedEx">
            <summary>
            分布式MemCached缓存操作对象
            线程安全类型
            </summary>
        </member>
        <member name="M:MemCachedLib.Cached.MemCachedEx.Create(System.Net.IPEndPoint[])">
            <summary>
            生成对应服务器实例的缓存操作对象
            </summary>
            <param name="ips">服务器ip列表</param>
            <returns></returns>
        </member>
        <member name="F:MemCachedLib.Cached.MemCachedEx.memCacheds">
            <summary>
            服务器缓存列表
            </summary>
        </member>
        <member name="F:MemCachedLib.Cached.MemCachedEx.searcher">
            <summary>
            服务缓存搜索
            </summary>
        </member>
        <member name="M:MemCachedLib.Cached.MemCachedEx.#ctor(System.Net.IPEndPoint[])">
            <summary>
            构造器
            </summary>
            <param name="ips">列表器IP列表</param>       
        </member>
        <member name="M:MemCachedLib.Cached.MemCachedEx.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>        
            <typeparam name="T">值类型</typeparam>        
            <param name="key">键值</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCachedEx.Get(System.String)">
            <summary>
            获取缓存
            </summary>         
            <param name="key">键值</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCachedEx.Set(System.String,System.Object,System.TimeSpan,System.Int64)">
            <summary>
            设置缓存
            </summary>         
            <param name="key">键值</param>       
            <param name="value">缓存对象(需要可序列化)</param>
            <param name="expiry">缓存时长，0秒表示永久</param>
            <param name="cas">版本号验证值(0表示忽略验证)</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCachedEx.Add(System.String,System.Object,System.TimeSpan,System.Int64)">
            <summary>
            添加缓存      
            </summary>
            <param name="key">键值</param>
            <param name="value">缓存对象(需要可序列化)</param>
            <param name="expiry">过期时间，0秒表示永久</param>
            <param name="cas">版本号验证值(0表示忽略验证)</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCachedEx.Replace(System.String,System.Object,System.TimeSpan,System.Int64)">
            <summary>
            替换缓存      
            </summary>
            <param name="key">键值</param>
            <param name="value">缓存对象(需要可序列化)</param>
            <param name="expiry">过期时间，0秒表示永久</param>
            <param name="cas">版本号验证值(0表示忽略验证)</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCachedEx.Delete(System.String)">
            <summary>
            删除缓存
            </summary>               
            <param name="key">键值</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCachedEx.Flush(System.TimeSpan)">
            <summary>
            刷新所有记录的过期时间
            </summary>
            <param name="expiry">经过一定时间后过期，0秒表示保持不过期</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
        </member>
        <member name="M:MemCachedLib.Cached.MemCachedEx.Touch(System.String,System.TimeSpan)">
            <summary>
            重置记录的过期时间
            <remarks>此功能一些服务器实现有bug，部分服务器不支持</remarks>
            </summary>
            <param name="key">键</param>
            <param name="expiry">过期时间</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCachedEx.GAT``1(System.String,System.TimeSpan)">
            <summary>
            GetAndTouch
            获取并重置过期时间
            <remarks>此功能一些服务器实现有bug，部分服务器不支持</remarks>
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="key">键</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCachedEx.Version(System.Net.IPEndPoint)">
            <summary>
            获取服务器版本
            </summary>
            <param name="ip">服务器IP</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCachedEx.Stat(System.Net.IPEndPoint,MemCachedLib.StatItems)">
            <summary>
            获取服务器状态信息
            </summary>
            <param name="ip">服务器IP</param>
            <param name="item">选项</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Cached.MemCachedEx.Dispose">
            <summary>
            清理并释放资源
            </summary>
        </member>
        <member name="P:MemCachedLib.Cached.MemCachedEx.Item(System.String)">
            <summary>
            通过Key来查询数据保存到的服务
            </summary>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="T:MemCachedLib.CachedReault`1">
            <summary>
            缓存查询结果
            </summary>
        </member>
        <member name="M:MemCachedLib.CachedReault`1.#ctor(MemCachedLib.OprationStatus,System.Int64,`0)">
            <summary>
            缓存查询结果
            </summary>
            <param name="status">状态</param>
            <param name="cas">数据版本号</param>
            <param name="value">值</param>
        </member>
        <member name="M:MemCachedLib.CachedReault`1.ToString">
            <summary>
            文本显示方式
            </summary>
            <returns></returns>
        </member>
        <member name="P:MemCachedLib.CachedReault`1.Status">
            <summary>
            获取是否成功状态
            </summary>
        </member>
        <member name="P:MemCachedLib.CachedReault`1.CAS">
            <summary>
            获取版本号验证值
            </summary>
        </member>
        <member name="P:MemCachedLib.CachedReault`1.Value">
            <summary>
            获取操作结果
            </summary>
        </member>
        <member name="T:MemCachedLib.CachedClient">
            <summary>
            缓存客户端
            </summary>
        </member>
        <member name="F:MemCachedLib.CachedClient.socket">
            <summary>
            套接字
            </summary>
        </member>
        <member name="F:MemCachedLib.CachedClient.serializer">
            <summary>
            提供序列化对象
            </summary>
        </member>
        <member name="F:MemCachedLib.CachedClient.socketBuffer">
            <summary>
            接收缓冲区
            </summary>
        </member>
        <member name="F:MemCachedLib.CachedClient.byteBuilder">
            <summary>
            接收数据对象
            </summary>
        </member>
        <member name="M:MemCachedLib.CachedClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            构造器
            </summary>
            <param name="ipEndPoint">服务器IP</param>       
        </member>
        <member name="M:MemCachedLib.CachedClient.ToEntity``1(System.Byte[])">
            <summary>
            反序列化得到对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="binary">数据</param>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.CachedClient.ToBinary(System.Object)">
            <summary>
            将对象序列化
            </summary>
            <param name="value">实体</param>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.CachedClient.Send(MemCachedLib.RequestHeader)">
            <summary>
            发送指令
            只取其中第一个响应包
            </summary>
            <param name="request">请求指令</param>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.CachedClient.Sends(MemCachedLib.RequestHeader)">
            <summary>
            发送指令
            接收多个响应包
            </summary>
            <param name="request">请求指令</param>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.CachedClient.Dispose">
            <summary>
            清理并释放资源
            </summary>
        </member>
        <member name="P:MemCachedLib.CachedClient.ipEndPoint">
            <summary>
            服务器地址
            </summary>
        </member>
        <member name="T:MemCachedLib.CachedClientPool">
            <summary>   
            缓存客户端连接池
            线程安全类型
            </summary> 
        </member>
        <member name="F:MemCachedLib.CachedClientPool.ip">
            <summary>
            服务器IP和端口
            </summary>
        </member>
        <member name="F:MemCachedLib.CachedClientPool.clientStack">
            <summary>
            客户端集合
            </summary>
        </member>
        <member name="F:MemCachedLib.CachedClientPool.spinWait">
            <summary>
            自旋等待对象
            </summary>
        </member>
        <member name="M:MemCachedLib.CachedClientPool.#ctor(System.Net.IPEndPoint)">
            <summary>
            构造器
            </summary>
            <param name="ip">服务器IP和端口</param>    
        </member>
        <member name="M:MemCachedLib.CachedClientPool.#ctor(System.Net.IPEndPoint,System.Int32)">
            <summary>
            构造器
            </summary>
            <param name="ip">服务器IP和端口</param>    
            <param name="maxClient">最大客户端数量</param>
        </member>
        <member name="M:MemCachedLib.CachedClientPool.Pop">
            <summary>
            从池中取出一个缓存客户端      
            </summary>       
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.CachedClientPool.Push(MemCachedLib.CachedClient)">
            <summary>
            将不现使用的缓存客户端放回池中
            </summary>
            <param name="client">缓存客户端</param>
        </member>
        <member name="M:MemCachedLib.CachedClientPool.Dispose">
            <summary>
            清理并释放资源
            </summary>
        </member>
        <member name="P:MemCachedLib.CachedClientPool.MaxClient">
            <summary>
            获取最大客户端数量
            </summary>
        </member>
        <member name="T:MemCachedLib.OprationStatus">
            <summary>
            操作结果状态
            </summary>
        </member>
        <member name="F:MemCachedLib.OprationStatus.No_Error">
            <summary>
            无任何错误
            </summary>
        </member>
        <member name="F:MemCachedLib.OprationStatus.Key_Not_Found">
            <summary>
            指定的键不存在
            </summary>
        </member>
        <member name="F:MemCachedLib.OprationStatus.Key_Exists">
            <summary>
            指定的键已存在
            </summary>
        </member>
        <member name="F:MemCachedLib.OprationStatus.Value_Too_Large">
            <summary>
            保存的实体过大
            </summary>
        </member>
        <member name="F:MemCachedLib.OprationStatus.Invalid_Arguments">
            <summary>
            参数无效
            </summary>
        </member>
        <member name="F:MemCachedLib.OprationStatus.Item_Not_Stored">
            <summary>
            实体不被保存
            </summary>
        </member>
        <member name="F:MemCachedLib.OprationStatus.IncrOrDecr_On_Non_Numeric_Value">
            <summary>
            自加或自减的对象不是数字类型
            </summary>
        </member>
        <member name="F:MemCachedLib.OprationStatus.The_Vbucket_Belongs_To_Another_Server">
            <summary>
            Vbucket属在其它服务器
            </summary>
        </member>
        <member name="F:MemCachedLib.OprationStatus.Authentication_Error">
            <summary>
            身份验证错误
            </summary>
        </member>
        <member name="F:MemCachedLib.OprationStatus.Authentication_Continue">
            <summary>
            身份验证进行中
            </summary>
        </member>
        <member name="F:MemCachedLib.OprationStatus.Unknow_Command">
            <summary>
            未知指令
            </summary>
        </member>
        <member name="F:MemCachedLib.OprationStatus.Out_Of_Memory">
            <summary>
            服务器内存溢出
            </summary>
        </member>
        <member name="F:MemCachedLib.OprationStatus.Not_Supported">
            <summary>
            不支持的操作
            </summary>
        </member>
        <member name="F:MemCachedLib.OprationStatus.Internal_Error">
            <summary>
            服务器内部错误
            </summary>
        </member>
        <member name="F:MemCachedLib.OprationStatus.Busy">
            <summary>
            服务器繁忙
            </summary>
        </member>
        <member name="F:MemCachedLib.OprationStatus.Temporary_Failure">
            <summary>
            暂时性操作失败
            </summary>
        </member>
        <member name="T:MemCachedLib.Request.FlushRequest">
            <summary>
            Flush指令
            <remarks>MAY have extras.MUST NOT have key.MUST NOT have value.</remarks>
            </summary>
        </member>
        <member name="T:MemCachedLib.RequestHeader">
            <summary>
            请求指令基础类   
            </summary>
        </member>
        <member name="F:MemCachedLib.RequestHeader.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="F:MemCachedLib.RequestHeader.CAS">
            <summary>
            版本号验证值
            </summary>
        </member>
        <member name="F:MemCachedLib.RequestHeader.Flags">
            <summary>
            标记
            </summary>
        </member>
        <member name="F:MemCachedLib.RequestHeader.Expiry">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="F:MemCachedLib.RequestHeader.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:MemCachedLib.RequestHeader.ToByteArray">
            <summary>
            转换为数据包
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.RequestHeader.ToString">
            <summary>
            字符串显示
            </summary>
            <returns></returns>
        </member>
        <member name="P:MemCachedLib.RequestHeader.OpCode">
            <summary>
            指令码(必须)
            </summary>
        </member>
        <member name="M:MemCachedLib.Request.FlushRequest.#ctor(System.TimeSpan)">
            <summary>
            Flush
            </summary>
            <param name="expiry">过期时间</param>
        </member>
        <member name="P:MemCachedLib.Request.FlushRequest.OpCode">
            <summary>
            操作指令
            </summary>
        </member>
        <member name="T:MemCachedLib.Request.GATRequest">
            <summary>
            GetAndTouch指令
            <remarks>MUST have extras.MUST have key.MUST NOT have value.</remarks>
            </summary>
        </member>
        <member name="M:MemCachedLib.Request.GATRequest.#ctor(System.String,System.TimeSpan)">
            <summary>
            构造器
            </summary>
            <param name="key">键</param>
            <param name="expiry">过期时间</param>
        </member>
        <member name="P:MemCachedLib.Request.GATRequest.OpCode">
            <summary>
            操作指令
            </summary>
        </member>
        <member name="T:MemCachedLib.OpCodes">
            <summary>
            操作指令     
            </summary>
        </member>
        <member name="T:MemCachedLib.Request.StatRequest">
            <summary>
            Stat指令
            <remarks>MUST NOT have extras.MAY have key.MUST NOT have value.</remarks>
            </summary>
        </member>
        <member name="M:MemCachedLib.Request.StatRequest.#ctor(MemCachedLib.StatItems)">
            <summary>
            构造器
            </summary>
            <param name="key">参数</param>
        </member>
        <member name="P:MemCachedLib.Request.StatRequest.OpCode">
            <summary>
            操作指令
            </summary>
        </member>
        <member name="T:MemCachedLib.Request.StoreRequest">
            <summary>
            存储指令
            <remarks>MUST have extras.MUST have key.MAY have value.</remarks>
            </summary>
        </member>
        <member name="F:MemCachedLib.Request.StoreRequest.opCode">
            <summary>
            存储方式
            </summary>
        </member>
        <member name="M:MemCachedLib.Request.StoreRequest.#ctor(MemCachedLib.OpCodes,System.String,System.Byte[],System.TimeSpan,System.Int64)">
            <summary>
            构造器
            </summary>
            <param name="code">存储方式</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expiry">时间</param>
            <param name="cas">版本号验证值(0表示忽略)</param>
        </member>
        <member name="P:MemCachedLib.Request.StoreRequest.OpCode">
            <summary>
            操作指令
            </summary>
        </member>
        <member name="T:MemCachedLib.Request.TouchReqeuest">
            <summary>
            Touch指令
            <remarks>MUST have extras.MUST have key.MUST NOT have value.</remarks>
            </summary>
        </member>
        <member name="M:MemCachedLib.Request.TouchReqeuest.#ctor(System.String,System.TimeSpan)">
            <summary>
            构造器
            </summary>
            <param name="key">键</param>
            <param name="expiry">过期时间</param>
        </member>
        <member name="P:MemCachedLib.Request.TouchReqeuest.OpCode">
            <summary>
            操作指令
            </summary>
        </member>
        <member name="T:MemCachedLib.Request.VersionRequest">
            <summary>
            Version指令
            <remarks>MUST NOT have extras.MUST NOT have key.MUST NOT have value.</remarks>
            </summary>
        </member>
        <member name="P:MemCachedLib.Request.VersionRequest.OpCode">
            <summary>
            操作指令
            </summary>
        </member>
        <member name="T:MemCachedLib.ResponseHeader">
            <summary>
            接收的一个完整响应数据包   
            </summary>
        </member>
        <member name="F:MemCachedLib.ResponseHeader.builder">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:MemCachedLib.ResponseHeader.#ctor(System.Byte[])">
            <summary>
            构造器
            </summary>
            <param name="binary">接收到的数据</param>
        </member>
        <member name="P:MemCachedLib.ResponseHeader.OpCode">
            <summary>
            指令
            </summary>
        </member>
        <member name="P:MemCachedLib.ResponseHeader.KeyLength">
            <summary>
            键长
            </summary>
        </member>
        <member name="P:MemCachedLib.ResponseHeader.ExtraLength">
            <summary>
            额外数据长
            </summary>
        </member>
        <member name="P:MemCachedLib.ResponseHeader.Status">
            <summary>
            操作状态
            </summary>
        </member>
        <member name="P:MemCachedLib.ResponseHeader.TotalBody">
            <summary>
            数据体长度
            </summary>
        </member>
        <member name="P:MemCachedLib.ResponseHeader.CAS">
            <summary>
            版本号验证值
            </summary>
        </member>
        <member name="P:MemCachedLib.ResponseHeader.Value">
            <summary>
            有效数据
            </summary>
        </member>
        <member name="T:MemCachedLib.Session.MemSessionProvider">
            <summary>
            通过MemCached实现的Session提供者
            </summary>
        </member>
        <member name="F:MemCachedLib.Session.MemSessionProvider.cachedEx">
            <summary>
            缓存操作对象
            </summary>
        </member>
        <member name="M:MemCachedLib.Session.MemSessionProvider.CreateNewStoreData(System.Web.HttpContext,System.Int32)">
            <summary>
            创建要用于当前请求的新 SessionState.SessionStateStoreData 对象
            </summary>
            <param name="context">当前请求的 HttpContext</param>
            <param name="timeout">SessionState.HttpSessionState.Timeout值</param>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Session.MemSessionProvider.CreateUninitializedItem(System.Web.HttpContext,System.String,System.Int32)">
            <summary>
            将新的会话状态项添加到数据存储区中
            </summary>
            <param name="context">当前请求的 HttpContext</param>
            <param name="id">当前请求的 SessionState.HttpSessionState.SessionID</param>
            <param name="timeout">当前请求的会话 SessionState.HttpSessionState.Timeout</param>
        </member>
        <member name="M:MemCachedLib.Session.MemSessionProvider.EndRequest(System.Web.HttpContext)">
            <summary>
            请求结束时
            </summary>
            <param name="context">上下文</param>
        </member>
        <member name="M:MemCachedLib.Session.MemSessionProvider.GetItem(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)">
            <summary>
            从会话数据存储区中返回只读会话状态数据
            </summary>
            <param name="context">当前请求的 HttpContext</param>
            <param name="id">当前请求的 SessionState.HttpSessionState.SessionID</param>
            <param name="locked">如果请求的会话项在会话数据存储区被锁定，请包含一个设置为 true 的布尔值；否则请包含一个设置为 false 的布尔值</param>
            <param name="lockAge">请包含一个设置为会话数据存储区中的项锁定时间的 System.TimeSpan 对象</param>
            <param name="lockId">请包含一个设置为当前请求的锁定标识符的对象</param>
            <param name="actions">请包含 SessionState.SessionStateActions 值之一，指示当前会话是否为未初始化的无Cookie会话</param>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Session.MemSessionProvider.GetItemExclusive(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)">
            <summary>
            从会话数据存储区中返回只读会话状态数据
            </summary>
            <param name="context">当前请求的 HttpContext</param>
            <param name="id">当前请求的 SessionState.HttpSessionState.SessionID</param>
            <param name="locked">如果成功获得锁定，请包含一个设置为 true 的布尔值；否则请包含一个设置为 false 的布尔值</param>
            <param name="lockAge">请包含一个设置为会话数据存储区中的项锁定时间的 System.TimeSpan 对象</param>
            <param name="lockId">请包含一个设置为当前请求的锁定标识符的对象</param>
            <param name="actions">请包含 SessionState.SessionStateActions 值之一，指示当前会话是否为未初始化的无Cookie会话</param>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Session.MemSessionProvider.InitializeRequest(System.Web.HttpContext)">
            <summary>
            请求初始化时
            </summary>
            <param name="context">上下文</param>
        </member>
        <member name="M:MemCachedLib.Session.MemSessionProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            初始化
            </summary>
            <param name="name">名称</param>
            <param name="config">配置</param>
        </member>
        <member name="M:MemCachedLib.Session.MemSessionProvider.ReleaseItemExclusive(System.Web.HttpContext,System.String,System.Object)">
            <summary>
            释放对会话数据存储区中项的锁定
            </summary>
            <param name="context">当前请求的 HttpContext</param>
            <param name="id">当前请求的会话标识符</param>
            <param name="lockId">lockId</param>
        </member>
        <member name="M:MemCachedLib.Session.MemSessionProvider.RemoveItem(System.Web.HttpContext,System.String,System.Object,System.Web.SessionState.SessionStateStoreData)">
            <summary>
            移除sesstion选项
            </summary>
            <param name="context">上下文</param>
            <param name="id">SessionID</param>
            <param name="lockId">锁ID</param>
            <param name="item">选项</param>
        </member>
        <member name="M:MemCachedLib.Session.MemSessionProvider.ResetItemTimeout(System.Web.HttpContext,System.String)">
            <summary>
            重新计时Session选项的超时时间
            以保持Session不被释放
            </summary>
            <param name="context">上下文</param>
            <param name="id">SessionID</param>
        </member>
        <member name="M:MemCachedLib.Session.MemSessionProvider.SetAndReleaseItemExclusive(System.Web.HttpContext,System.String,System.Web.SessionState.SessionStateStoreData,System.Object,System.Boolean)">
            <summary>
            使用当前请求中的值更新会话状态数据存储区中的会话项信息，并清除对数据的锁定
            </summary>
            <param name="context">上下文</param>
            <param name="id">SessionID</param>
            <param name="item">Session选项</param>
            <param name="lockId">锁ID</param>
            <param name="newItem">如果为 true，则将会话项标识为新项；如果为 false，则将会话项标识为现有的项</param>
        </member>
        <member name="M:MemCachedLib.Session.MemSessionProvider.SetItemExpireCallback(System.Web.SessionState.SessionStateItemExpireCallback)">
            <summary>
            如果会话状态存储提供程序支持调用 Session_OnEnd 事件，则为 true；否则为 false
            </summary>
            <param name="expireCallback">回调</param>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Session.MemSessionProvider.Dispose">
            <summary>
            清理释放资源
            </summary>
        </member>
        <member name="P:MemCachedLib.Session.MemSessionProvider.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:MemCachedLib.Session.MemSessionProvider.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:MemCachedLib.Request.DeleteRequest">
            <summary>
            删除缓存命令
            <remarks>MUST NOT have extras.MUST have key.MUST NOT have value.</remarks>
            </summary>
        </member>
        <member name="M:MemCachedLib.Request.DeleteRequest.#ctor(System.String)">
            <summary>
            构造器
            </summary>
            <param name="key">键值</param>
        </member>
        <member name="P:MemCachedLib.Request.DeleteRequest.OpCode">
            <summary>
            操作指令
            </summary>
        </member>
        <member name="T:MemCachedLib.Request.GetRequest">
            <summary>
            获取缓存命令
            </summary>
        </member>
        <member name="M:MemCachedLib.Request.GetRequest.#ctor(System.String)">
            <summary>
            构造器
            <remarks>MUST NOT have extras.MUST have key.MUST NOT have value.</remarks>
            </summary>
            <param name="key">键</param>
        </member>
        <member name="P:MemCachedLib.Request.GetRequest.OpCode">
            <summary>
            操作指令
            </summary>
        </member>
        <member name="T:MemCachedLib.Session.SessionItem">
            <summary>
            Session数据项目
            </summary>
        </member>
        <member name="P:MemCachedLib.Session.SessionItem.ActionFlag">
            <summary>
            初始化标识
            </summary>
        </member>
        <member name="P:MemCachedLib.Session.SessionItem.LockId">
            <summary>
            锁ID
            </summary>
        </member>
        <member name="P:MemCachedLib.Session.SessionItem.LockTime">
            <summary>
            锁时间
            </summary>
        </member>
        <member name="P:MemCachedLib.Session.SessionItem.TimeOut">
            <summary>
            记录过期时间(分)
            </summary>
        </member>
        <member name="P:MemCachedLib.Session.SessionItem.Locked">
            <summary>
            是否已锁
            </summary>
        </member>
        <member name="P:MemCachedLib.Session.SessionItem.Binary">
            <summary>
            Session有效数据
            </summary>
        </member>
        <member name="T:MemCachedLib.Session.SessionSerializer">
            <summary>
            Session数据序列化和反序列化
            </summary>
        </member>
        <member name="M:MemCachedLib.Session.SessionSerializer.Serialize(System.Web.SessionState.SessionStateItemCollection)">
            <summary>
            序列化为二进制数据
            </summary>
            <param name="items">选项</param>
            <returns></returns>
        </member>
        <member name="M:MemCachedLib.Session.SessionSerializer.Deserialize(System.Byte[])">
            <summary>
            反序列为集合
            </summary>
            <param name="binary">数据</param>
            <returns></returns>
        </member>
        <member name="T:MemCachedLib.StatItems">
            <summary>
            Stat指令的选项枚举
            <remarks>二进制协议支持的stat选项不如文本协议的丰富</remarks>
            </summary>
        </member>
        <member name="F:MemCachedLib.StatItems.nothing">
            <summary>
            表示空选项
            </summary>
        </member>
        <member name="F:MemCachedLib.StatItems.items">
            <summary>
            items选项
            </summary>
        </member>
        <member name="F:MemCachedLib.StatItems.slabs">
            <summary>
            slabs选项
            </summary>
        </member>
        <member name="F:MemCachedLib.StatItems.sizes">
            <summary>
            sizes选项
            </summary>
        </member>
    </members>
</doc>
